import { ArrowLeftIcon, ArrowRightIcon } from '@chakra-ui/icons'
import {
  Card,
  Box,
  Image,
  Text,
  Flex,
  Button
} from '@chakra-ui/react'
import { Hotel, Photo, Rating, Room } from '@prisma/client'

import { Carousel } from 'react-responsive-carousel'

import Head from 'next/head'
import { GetServerSideProps } from 'next/types'
import HotelImage from '../../components/Image'

import prisma from '../../utils/prisma'
import { ObjectId } from 'mongodb'
import UnitSearchBar from '../../components/UnitSearchBar'
import { useSession } from 'next-auth/react'
import React, { createRef } from 'react'
import useFileUpload from 'react-use-file-upload'
import HotelEditButton from '../../components/Management/HotelEditButton'
import RoomTypeAddButton from '../../components/Management/RoomTypeAddButton'
import RoomAddButton from '../../components/Management/RoomAddButton'
import { useRouter } from 'next/router'

export default function Profile({ hotel } : { hotel: (Hotel & {
  photos: Photo[];
  rooms: Room[];
  ratings: Rating[];
}) }) {
  const session = useSession()
  const uploadRef = createRef<HTMLInputElement>();

  const [photos, setPhotos] = React.useState(hotel.photos);

  const [uploading, setUploading] = React.useState(false);

  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();

    setUploading(true);
    const files = e.target.files;

    if (!files) {
      return;
    }

    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }

    try {
      const res = await fetch(`/api/photos`, {
        method: 'POST',
        body: formData,
      }).then(res => res.json())

      if (res.message) {
        const res2 = await fetch(`/api/hotels/${hotel.id}/photos`, {
          method: 'POST',
          body: JSON.stringify(res),
        }).then(res => res.json())

        setPhotos(res2.photos);
      }
    } catch (error) {
      console.error('Failed to submit files.');
    }

    if (uploadRef.current) {
      uploadRef.current.files = null;
      uploadRef.current.value = '';
    }
    setUploading(false);
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex justifyContent="center" width="100%" my="8rem">
        <Box width={["100%", "70%", "50%", "40%"]} mx={[0, 4, 8, 12]}>
          { photos.length > 0 && (
            <Carousel showArrows={true}>
              {
                photos.map(photo => (
                  <div key={photo.id}>
                    <HotelImage as="img" src={`/api/photos/${photo.id}`} />
                    <p className="legend">{photo.caption}</p>
                  </div>
                ))
              }
            </Carousel>
          ) }
          <Box display="flex" alignItems="baseline">
            <Text fontSize='5xl' as="b" mt={8}>
              {hotel.name}
            </Text>
            <Box
              color="orange.500"
              fontWeight="bold"
              letterSpacing="wide"
              ml="4"
              fontSize="2xl"
              textTransform="uppercase"
            >
              {hotel.totalRating.toFixed(2)}
            </Box>
          </Box>

          <Box>
            <Text fontSize="large">{hotel.location}</Text>
          </Box>
          <Box mt={4}>
            <Text as="p">{hotel.description}</Text>
          </Box>
          { hotel.managerId === session.data?.user?.id && (
            <Box mt={4}>
              <input name="files" type="file" accept="image/jpeg" hidden ref={uploadRef} multiple disabled={uploading} onChange={(e) => {
                handlePhotoUpload(e);
              }} />
              <Button mr={2} onClick={() => uploadRef.current?.click()} isLoading={uploading}>Add Photos</Button>
              <HotelEditButton hotel={hotel} mr={2} />
              <RoomTypeAddButton mr={2} />
              <RoomAddButton mr={2} />
              <Button mr={2} disabled>View Bookings</Button>
            </Box>
          ) }
          
        </Box>
      </Flex>

      <Box p={16} mt={8}>
        <Text fontSize='5xl' as="b" mb={32}>
          Choose your unit
        </Text>
        <UnitSearchBar />
      </Box>

    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { params } = context

  if (!params) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      }
    }
  }

  if (!('id' in params)) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      }
    }
  }

  const id = params.id

  if (!ObjectId.isValid(id as string)) {
    return {
      notFound: true
    }
  }

  const hotel = await prisma.hotel.findUnique({
    where: {
      id: id as string
    },
    include: {
      photos: true,
      ratings: true,
      roomTypes: {
        include: {
          photos: true
        }
      }
    }
  })

  if (hotel) {
    return {
      props: {
        hotel
      },
    }
  }

  return {
    notFound: true
  }

  
}