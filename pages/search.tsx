import {
  Box,
  Text
} from '@chakra-ui/react'
import { Hotel, Photo } from '@prisma/client';
import Head from 'next/head'
import { GetServerSideProps } from 'next/types';
import HeroSmall from '../components/HeroSmall';
import HotelList from '../components/HotelList';
import prisma from '../utils/prisma';

export default function Search({ hotels, location }: { hotels: (Hotel & {photos: Photo[]})[], location: string }) {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HeroSmall />

      <Box p={16}>
        <Text fontSize='5xl' as="b" mb={8}>
          Search results for {location}
        </Text>

        <HotelList hotels={hotels.map(hotel => ({
          id: hotel.id,
          name: hotel.name,
          image: hotel.photos[0] ? `/api/photos/${hotel.photos[0].id}` : "https://picsum.photos/id/57/1280/720/?grayscale&blur=10",
          location: hotel.location,
          rating: hotel.totalRating.toFixed(2),
          price: `From \$${hotel.minPrice.toFixed(2)} per night`
        }))} />
      </Box>
    </div>
  )
}

// Exclude keys from user
function exclude<Hotel, Key extends keyof Hotel>(
  entry: Hotel,
  keys: Key[]
): Omit<Hotel, Key> {
  for (let key of keys) {
    delete entry[key]
  }
  return entry
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { query } = context

  if (!query.location || !query.check_in || !query.check_out || !query.guests || !query.rooms) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      }
    }
  }

  const bookings = await prisma.booking.findMany({
    where: {
      OR: [
        {
          checkIn: {
            gte: new Date(query.check_in as string),
            lte: new Date(query.check_out as string),
          }
        },
        {
          checkOut: {
            gte: new Date(query.check_in as string),
            lte: new Date(query.check_out as string),
          }
        }
      ],
    },
    select: {
      hotelId: true,
    }
  })

  const rawHotels = await prisma.hotel.findMany({
    where: {
      id: {
        notIn: bookings.map(booking => booking.hotelId),
      },
      location: {
        contains: query.location as string,
        mode: 'insensitive',
      },
      roomTypes: {
        some: {
          maxGuests: {
            lte: Number(query.guests),
          },
          availableRooms: {
            gte: Number(query.rooms),
          }
        }
      }
    },
    include: {
      photos: true,
    },
    orderBy: [
      {
        totalRating: 'desc',
      }
    ]
  })

  const hotels = rawHotels.map(hotel => exclude(hotel, ['createdAt', 'updatedAt']))

  return {
    props: {
      hotels,
      location: query.location,
    },
  }
}